# specific path build
trigger:
  paths:
    exclude:
      - .vscode/*
      - .github/*
      - .appveyor.yml
      - .cirrus.yml
      - .editorconfig
      - .gitattributes
      - .gitignore
      - .pylintrc
      - .travis.yml
      - pyproject.toml

jobs:
  - job: Linux
    pool:
      vmImage: "ubuntu-18.04"
    displayName: "Linux Build"
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "3.6"
          architecture: "x64"

      - script: lsb_release -a
        displayName: Ubuntu details

      - script: echo "##vso[task.prependpath]/opt/lua/bin"
        displayName: Add to path

      - script: echo $PATH
        displayName: echo PATH

      - script: |
          set -euxo pipefail
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo apt-get update
          sudo apt-get install -y dialog apt-utils software-properties-common libreadline7 libreadline-dev doxygen graphviz
          sudo apt-add-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main"
          sudo apt-get install -y build-essential
          sudo apt-get update
          sudo apt-get install -y clang-9 lld-9
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-9 100
          pip install --upgrade pip -q
          pip install sphinx pathlib pyyaml -q
        displayName: Install dependencies

      - script: |
          python --version
          gcc --version
          clang --version
          doxygen --version
          dot -V
          sphinx-build --version
        displayName: Compiler and Tools versions

      - script: |
          set -euxo pipefail
          python waf configure -v
          python waf build_docs
          python waf clean_docs
          python waf distclean
        displayName: Documentation build

      - script: |
          set -euxo pipefail
          python waf configure --include-tests --prefix=/opt/lua
          python waf build_gcc
          python waf install_gcc
          pushd build/gcc/tests
          lua -e"_U=true" all.lua
          lua all.lua
          popd
          python waf uninstall_gcc
          python waf clean_gcc
          python waf distclean
        displayName: GCC build including tests

      - script: |
          set -euxo pipefail
          python waf configure --ltests --include-tests --prefix=/opt/lua
          python waf build_gcc
          python waf install_gcc
          pushd build/gcc/tests
          lua -e"_U=true" all.lua
          lua all.lua
          popd
          python waf uninstall_gcc
          python waf clean_gcc
        displayName: GCC build including tests and ltests

      - script: |
          set -euxo pipefail
          python waf configure --include-tests --prefix=/opt/lua
          python waf build_clang
          python waf install_clang
          pushd build/clang/tests
          lua -e"_U=true" all.lua
          lua all.lua
          popd
          python waf uninstall_clang
          python waf clean_clang
          python waf distclean
        displayName: clang build including tests

      - script: |
          set -euxo pipefail
          python waf configure --ltests --include-tests --prefix=/opt/lua
          python waf build_clang
          python waf install_clang
          pushd build/clang/tests
          lua -e"_U=true" all.lua
          lua all.lua
          popd
          python waf uninstall_clang
          python waf clean_clang
        displayName: clang build including tests and ltests

      - script: |
          set -euxo pipefail
          python scripts/run_test.py -c gcc -c clang --simple-test
        displayName: test script (gcc, clang) with --simple-test

      - script: |
          set -euxo pipefail
          python scripts/run_test.py -c gcc -c clang --simple-test --ltests
        displayName: test script (gcc, clang) with --simple-test and ltests

  - job: Windows
    pool:
      vmImage: "windows-2019"
    displayName: "Windows Build"
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "3.6"
          addToPath: true
          architecture: "x64"

      - script: choco install llvm -y --version 9.0.0
        displayName: Install LLVM

      - script: |
          curl.exe -o $(Agent.TempDirectory)\doxygen-x64.zip http://doxygen.nl/files/doxygen-1.8.16.windows.x64.bin.zip
          curl.exe -o $(Agent.TempDirectory)\graphviz.zip https://graphviz.gitlab.io/_pages/Download/windows/graphviz-2.38.zip
        displayName: Downloading doxygen and graphviz

      - task: ExtractFiles@1
        inputs:
          archiveFilePatterns: "$(Agent.TempDirectory)/*.zip"
          destinationFolder: "$(Agent.TempDirectory)"
          cleanDestinationFolder: false
        displayName: Extracting doxygen and graphviz

      - script: echo "##vso[task.prependpath]$(Agent.TempDirectory)
        displayName: Add doxygen to path
      - script: echo "##vso[task.prependpath]$(Agent.TempDirectory)\release\bin
        displayName: Add graphviz to path
      - script: echo "##vso[task.prependpath]C:\Program Files\LLVM\bin\
        displayName: Add clang to path
      - script: echo %PATH%
        displayName: echo PATH

      - script: |
          pip install --upgrade pip -q
          pip install sphinx pyyaml -q
        displayName: installing dependencies

      - script: |
          python --version
          gcc --version
          clang --version
          "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\bin\HostX64\x64\CL.exe"
          doxygen --version
          dot -V
          sphinx-build --version
        displayName: Compiler and Tools versions

      - script: python scripts\run_test.py -c msvc -c gcc -c clang --simple-test -vv
        displayName: test script (msvc, gcc, clang) with --simple-test

      - script: python scripts\run_test.py -c msvc -c gcc -c clang --simple-test --ltests -vv
        displayName: test script (msvc, gcc, clang) with --simple-test and ltests

  - job: OSXBuild
    pool:
      vmImage: "macOS-10.14"
    displayName: "MacOSX Build"
    steps:
      - script: echo "##vso[task.prependpath]/usr/local/opt/python/libexec/bin"
        displayName: Add python to path

      - script: echo "##vso[task.prependpath]/opt/lua/bin"
        displayName: Add lua install path to path
      - script: echo "##vso[task.prependpath]/usr/local/Cellar/gcc/9.1.0/bin/"
        displayName: Add gcc to path

      - script: echo $PATH
        displayName: echo PATH

      - script: |
          set -euxo pipefail
          brew install --force gcc coreutils
          brew ls --verbose gcc
          brew unlink gcc
          brew link gcc --dry-run
          brew link gcc
          ln -s /usr/local/bin/gcc-9 /usr/local/bin/gcc
          which gcc
          greadlink -f `which gcc`
          echo | gcc -E -Wp,-v -
          brew install python3 doxygen graphviz
          pip install --upgrade pip -q
          pip install sphinx pyyaml -q
        displayName: Install dependencies

      - script: |
          python --version
          gcc --version
          clang --version
          doxygen --version
          dot -V
          sphinx-build --version
        displayName: Compiler and Tools versions

      - script: |
          set -euxo pipefail
          python waf configure -v
          python waf build_docs
          python waf clean_docs
          python waf distclean
        displayName: Documentation build

      - script: |
          set -euxo pipefail
          python waf configure --include-tests --prefix=/opt/lua -v
        displayName: configure with tests

      - script: |
          set -euxo pipefail
          python waf build_clang -v
          sudo python waf install_clang
          pushd build/clang/tests
          lua -e"_U=true" all.lua
          # lua all.lua
          popd
          sudo python waf uninstall_clang
          python waf clean_clang
        displayName: clang build including tests

      - script: |
          set -euxo pipefail
          python waf build_gcc -v
          sudo python waf install_gcc
          pushd build/gcc/tests
          lua -e"_U=true" all.lua
          # lua all.lua
          popd
          sudo python waf uninstall_gcc
          python waf clean_gcc
        displayName: gcc build including tests

      - script: |
          set -euxo pipefail
          python waf distclean
        displayName: distclean

      - script: |
          set -euxo pipefail
          python waf configure --ltests --include-tests --prefix=/opt/lua -v
        displayName: configure with tests and ltests

      - script: |
          set -euxo pipefail
          python waf build_clang -v
          sudo python waf install_clang
          pushd build/clang/tests
          lua -e"_U=true" all.lua
          # lua all.lua
          popd
          sudo python waf uninstall_clang
          python waf clean_clang
        displayName: clang build including tests and ltests

      - script: |
          set -euxo pipefail
          python waf build_gcc -v
          sudo python waf install_gcc
          pushd build/gcc/tests
          lua -e"_U=true" all.lua
          # lua all.lua
          popd
          sudo python waf uninstall_gcc
          python waf clean_gcc
        displayName: gcc build including tests and ltests

      - script: |
          set -euxo pipefail
          python waf distclean
        displayName: distclean
