trigger:
  paths:
    exclude:
      - .vscode/*
      - .github/*
      - .appveyor.yml
      - .cirrus.yml
      - .editorconfig
      - .gitattributes
      - .gitignore
      - pyproject.toml

variables:
  NATIVE_LUA_CI_BUILD: "TRUE"
  TOOL_VERSIONS: "-t black -t pylint -t isort"

jobs:
  - job: Linux
    displayName: "Linux Build"
    pool:
      vmImage: "ubuntu-18.04"
    variables:
      - name: lua_install_prefix
        value: /opt/lua
      - name: install_packages
        value: dialog apt-utils software-properties-common libreadline7 libreadline-dev build-essential
    strategy:
      matrix:
        gcc_include_tests:
          CC_LUA_BUILD: gcc
          CC_LUA_BUILD_OPTIONS: --include-tests
        gcc_include_tests_ltests:
          CC_LUA_BUILD: gcc
          CC_LUA_BUILD_OPTIONS: --include-tests --ltests
        clang_include_tests:
          CC_LUA_BUILD: clang
          CC_LUA_BUILD_OPTIONS: --include-tests
        clang_include_tests_ltests:
          CC_LUA_BUILD: clang
          CC_LUA_BUILD_OPTIONS: --include-tests --ltests
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "3.6"
          architecture: "x64"

      - script: lsb_release -a
        displayName: Ubuntu details

      - script: echo "##vso[task.prependpath]/opt/lua/bin"
        displayName: Add install path to $PATH

      - script: echo $PATH
        displayName: Verify $PATH

      - script: sudo apt-get install -y ${{ variables.install_packages }}
        displayName: Installing common development tools

      - script: python -m pip install --upgrade pip && python -m pip install --upgrade --requirement requirements.txt
        displayName: Installing pip dependencies

      - script: |
          set -euxo pipefail
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo apt-add-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main"
          sudo apt-get update
          sudo apt-get install -y clang-10 lld-10
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-10 100
        displayName: Install clang
        condition: eq(variables['CC_LUA_BUILD'], 'clang')

      - script: python versions.py -t ${CC_LUA_BUILD} ${TOOL_VERSIONS}
        displayName: Compiler and Tools versions

      - script: python waf configure -v --check-c-compiler=${CC_LUA_BUILD} ${CC_LUA_BUILD_OPTIONS} --prefix=${{ variables.lua_install_prefix }} build install
        displayName: Configure, build, install

      - script: lua -e"_U=true" all.lua
        displayName: Simple test
        workingDirectory: build/tests

      - script: lua all.lua
        displayName: Full test
        workingDirectory: build/tests

      - script: python waf uninstall clean distclean
        displayName: Uninstall, clean and distclean

  - job: Windows
    displayName: "Windows Build"
    pool:
      vmImage: "windows-2019"
    variables:
      - name: lua_install_prefix
        value: "%LOCALAPPDATA%\\Programs\\lua"
    strategy:
      matrix:
        msvc_include_tests:
          CC_LUA_BUILD: msvc
          CC_LUA_BUILD_OPTIONS: --include-tests
        # msvc_include_tests_ltests:
        #   CC_LUA_BUILD: msvc
        #   CC_LUA_BUILD_OPTIONS: --include-tests --ltests
        gcc_include_tests:
          CC_LUA_BUILD: gcc
          CC_LUA_BUILD_OPTIONS: --include-tests
        # gcc_include_tests_ltests:
        #   CC_LUA_BUILD: gcc
        #   CC_LUA_BUILD_OPTIONS: --include-tests --ltests
        clang_include_tests:
          CC_LUA_BUILD: clang
          CC_LUA_BUILD_OPTIONS: --include-tests
        # clang_include_tests_ltests:
        #   CC_LUA_BUILD: clang
        #   CC_LUA_BUILD_OPTIONS: --include-tests --ltests
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "3.6"
          addToPath: true
          architecture: "x64"

      - script: python -m pip install --upgrade pip && python -m pip install --upgrade --requirement requirements.txt
        displayName: Installing pip dependencies

      - script: |
          choco install --no-progress llvm -y --version 10.0.0
          echo ##vso[task.prependpath]C:\Program Files\LLVM\bin
        displayName: Install clang
        condition: eq(variables['CC_LUA_BUILD'], 'clang')

      - script: |
          echo ##vso[task.prependpath]%LOCALAPPDATA%\Programs\lua\bin
        displayName: Add lua installation to PATH

      - script: echo %PATH%
        displayName: Show %PATH%

      - script: |
          if %CC_LUA_BUILD%==msvc (
            call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
          )
          echo versions.py -t $(CC_LUA_BUILD) $(TOOL_VERSIONS)
          python versions.py -t $(CC_LUA_BUILD) $(TOOL_VERSIONS)
        displayName: Compiler and Tools versions

      - script: python waf configure -v --check-c-compiler=$(CC_LUA_BUILD) $(CC_LUA_BUILD_OPTIONS) --prefix=${{ variables.lua_install_prefix }} build install
        displayName: Configure, build, install

      - script: lua -e"_U=true" all.lua
        displayName: Simple test
        workingDirectory: build/tests

      # - script: lua all.lua
      #   displayName: Full test
      #   workingDirectory: build/tests

      - script: python waf uninstall clean distclean
        displayName: Uninstall, clean and distclean

  - job: macOS
    displayName: "macOS Build"
    pool:
      vmImage: "macOS-10.15"
    variables:
      - name: lua_install_prefix
        value: /opt/lua
    strategy:
      matrix:
        gcc_include_tests:
          CC_LUA_BUILD: gcc
          CC_LUA_BUILD_OPTIONS: --include-tests
        gcc_include_tests_ltests:
          CC_LUA_BUILD: gcc
          CC_LUA_BUILD_OPTIONS: --include-tests --ltests
        clang_include_tests:
          CC_LUA_BUILD: clang
          CC_LUA_BUILD_OPTIONS: --include-tests
        clang_include_tests_ltests:
          CC_LUA_BUILD: clang
          CC_LUA_BUILD_OPTIONS: --include-tests --ltests
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "3.6"

      - script: echo "##vso[task.prependpath]/opt/lua/bin"
        displayName: Add install path to $PATH

      - script: python -m pip install --upgrade pip && python -m pip install --upgrade --requirement requirements.txt
        displayName: Installing pip dependencies

      - script: |
          set -euxo pipefail
          export CURL_SSL_BACKEND=secure-transport
          brew update
          brew upgrade
          brew install --force gcc coreutils
          brew ls --verbose gcc
          brew unlink gcc
          brew link gcc --dry-run
          brew link gcc
          ln -s /usr/local/bin/gcc-10 /usr/local/bin/gcc
          which gcc
          greadlink -f `which gcc`
          echo | gcc -E -Wp,-v -
          gcc -dM -E - < /dev/null
        displayName: Install gcc
        condition: eq(variables['CC_LUA_BUILD'], 'gcc')

      - script: echo "##vso[task.prependpath]/usr/local/Cellar/gcc/10.2.0/bin/"
        condition: eq(variables['CC_LUA_BUILD'], 'gcc')
        displayName: Add gcc to path

      - script: echo $PATH
        condition: eq(variables['CC_LUA_BUILD'], 'gcc')
        displayName: echo PATH

      - script: python versions.py -t ${CC_LUA_BUILD} ${TOOL_VERSIONS}
        displayName: Compiler and Tools versions

      - script: sudo python waf configure -v --check-c-compiler=${CC_LUA_BUILD} ${CC_LUA_BUILD_OPTIONS} --prefix=${{ variables.lua_install_prefix }} build install
        displayName: Configure, build, install

      - script: lua -e"_U=true" all.lua
        displayName: Simple test
        workingDirectory: build/tests

      # - script: lua all.lua
      #   displayName: Full test
      #   workingDirectory: build/tests

      - script: sudo python waf uninstall clean distclean
        displayName: Uninstall, clean and distclean

  - job: WindowsSPA
    displayName: "Static Program Analysis"
    pool:
      vmImage: "windows-2019"
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "3.6"
          addToPath: true
          architecture: "x64"

      - script: python -m pip install --upgrade pip && python -m pip install --upgrade --requirement requirements.txt
        displayName: Installing pip dependencies

      - script: python versions.py -t black -t pylint -t isort
        displayName: Static Program Analysis Tools versions

      - script: python waf --help
        displayName: Unpack waf
      - script: isort . --settings-path=pyproject.toml --check -v
        displayName: Run isort
      - script: black . --config=pyproject.toml --check -v
        displayName: Run black
      - script: |
          pylint --rcfile=pyproject.toml wscript
          pylint --rcfile=pyproject.toml versions.py
        displayName: Run pylint
