jobs:
  - job: Linux
    pool:
      vmImage: 'ubuntu-latest'
    displayName: "Linux Build"
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.6'
          architecture: 'x64'
      - script: echo "##vso[task.prependpath]/opt/lua/bin"
        displayName: Add to path

      - script: echo $PATH
        displayName: echo PATH

      - script: |
          set -euxo pipefail
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo apt-get update
          sudo apt-get install -y dialog apt-utils software-properties-common libreadline6 libreadline6-dev
          sudo apt-add-repository "deb http://apt.llvm.org/stretch/ llvm-toolchain-stretch-8 main"
          sudo apt-get install -y build-essential
          sudo apt-get update
          sudo apt-get install -y clang-8 lld-8
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-8 100
          pip install sphinx_rtd_theme
          pip install pathlib
        displayName: Install dependencies

      - script: python --version
        displayName: Python version

      - script: |
          set -euxo pipefail
          python waf configure -v
          python waf build_doc
          python waf clean_doc
          python waf distclean
        displayName: Documentation build

      - script: |
          set -euxo pipefail
          python waf configure --include-tests --prefix=/opt/lua
          python waf build_gcc
          python waf install_gcc
          pushd build/gcc/tests
          lua -e"_U=true" all.lua
          lua all.lua
          popd
          python waf uninstall_gcc
          python waf clean_gcc
          python waf distclean
        displayName: GCC build including tests

      - script: |
          set -euxo pipefail
          python waf configure --ltests --include-tests --prefix=/opt/lua
          python waf build_gcc
          python waf install_gcc
          pushd build/gcc/tests
          lua -e"_U=true" all.lua
          lua all.lua
          popd
          python waf uninstall_gcc
          python waf clean_gcc
        displayName: GCC build including tests and ltests

      - script: |
          set -euxo pipefail
          python waf configure --include-tests --prefix=/opt/lua
          python waf build_clang
          python waf install_clang
          pushd build/clang/tests
          lua -e"_U=true" all.lua
          lua all.lua
          popd
          python waf uninstall_clang
          python waf clean_clang
          python waf distclean
        displayName: clang build including tests

      - script: |
          set -euxo pipefail
          python waf configure --ltests --include-tests --prefix=/opt/lua
          python waf build_clang
          python waf install_clang
          pushd build/clang/tests
          lua -e"_U=true" all.lua
          lua all.lua
          popd
          python waf uninstall_clang
          python waf clean_clang
        displayName: clang build including tests and ltests

      - script: |
          set -euxo pipefail
          python scripts/run_test.py -c gcc -c clang --simple-test
        displayName: test script (gcc, clang) with --simple-test

      - script: |
          set -euxo pipefail
          python scripts/run_test.py -c gcc -c clang --simple-test --ltests
        displayName: test script (gcc, clang) with --simple-test and ltests


  - job: Windows
    pool:
      vmImage: 'vs2017-win2016'
    displayName: "Windows Build"
    steps:
      - script: echo $(Agent.OS)

  - job: OSXBuild
    pool:
      vmImage: 'macOS-10.13'
    displayName: "MacOSX Build"
    steps:
      - script: echo "##vso[task.prependpath]/usr/local/opt/python/libexec/bin"
        displayName: Add python to path
      - script: echo "##vso[task.prependpath]/usr/local/opt/gcc/bin"
        displayName: Add to gcc path
      - script: echo $PATH
        displayName: echo PATH
      - script: |
          set -euxo pipefail
          brew install --force gcc
          brew install python3
          pip install sphinx_rtd_theme -q
        displayName: Install dependencies

      - script: |
          set -euxo pipefail
          python waf configure --include-tests --prefix=/opt/lua
          python waf build_clang
          python waf install_clang
          pushd build/clang/tests
          lua -e"_U=true" all.lua
          lua all.lua
          popd
          python waf uninstall_clang
          python waf clean_clang
          python waf distclean
        displayName: clang build including tests

      - script: |
          set -euxo pipefail
          python waf configure --ltests --include-tests --prefix=/opt/lua
          python waf build_clang
          python waf install_clang
          pushd build/clang/tests
          lua -e"_U=true" all.lua
          lua all.lua
          popd
          python waf uninstall_clang
          python waf clean_clang
        displayName: clang build including tests and ltests
