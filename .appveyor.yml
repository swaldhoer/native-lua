version: 5.3.4.{build}

image:
  - Visual Studio 2017
  - Ubuntu

skip_commits:
  files:
    - .vscode/*
    - .github/*
    - .cirrus.yml
    - .editorconfig
    - .travis.yml
    - azure-pipelines.yml

init:
  - git config --global core.autocrlf input

install:
  - ps: |
      if ($isWindows) {
        $rmpath = "Docker", "SQL", "Mercurial", "Subversion", "Maven", "CMake"
        $rmpath += "nodejs", "nunit", "nuget", "java", "xunit", "go", "python"
        $rmpath += "Amazon", "ruby", "perl", "Azur", "Webdriver", "Coverity"
        $rmpath += "Octopus", "erl9", "dotnet", "iojs", "curl", "Yarn"
        $rmpath += "chocolatey", "npm", "Windows Performance Toolkit"
        $rmpath += "Microsoft Service Fabric", "Microsoft DNX"
        $rmpath += "Microsoft Visual Studio"
        $rmpath += "ServiceFabricLocalClusterManager"
        foreach ($i in $rmpath) {
          $env:path = ($env:path -split ";").Where({!($_ -like "*$i*")}) -join ";"
        }
      }
  - cmd: pushd "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\" && call "VC\Auxiliary\Build\vcvars64.bat" && popd
  - cmd: set PATH=C:\mingw-w64\x86_64-8.1.0-posix-seh-rt_v6-rev0\mingw64\bin;%PATH%
  - cmd: set PATH=C:\Python37-x64;C:\Python37-x64\Scripts;%PATH%
  - ps: |
      if ($isWindows) {
        Write-Host New `$env:Path
        Write-Host ($env:Path).Replace(';',"`n")
        }
  - cmd: python -m pip install --upgrade pip -q
  - cmd: python -m pip install pylint black sphinx -q
  - sh: sudo python -m pip install sphinx -q
  - python --version
  - cmd: black --version
  - cmd: pylint --version
  - clang --version
  - gcc --version
  - cmd: cl
  - cmd: C:\cygwin64\bin\bash.exe -l -c "python --version"
  - cmd: C:\cygwin64\bin\bash.exe -l -c "python -m ensurepip --upgrade"
  - cmd: C:\cygwin64\bin\bash.exe -l -c "python -m pip install -q"
  # for testing
  - cmd: set PATH=%PATH%;%userprofile%\AppData\Local\Programs\lua\bin

before_build:
  - python waf --help
  # ensure that only well formated wscripts are checked in
  - cmd: black . --config=pyproject.toml --check -v
  - cmd: pylint wscript
  - cmd: pylint scripts\\run_test.py
  - cmd: pylint scripts\\sphinx.py
  - cmd: pylint scripts\\utils.py

build_script:
  # basic configuration
  - python waf configure
  # check documentation build
  - python waf build_docs
  - python waf clean_docs
  - python waf distclean
  # configure including the test files
  - python waf configure --include-tests
  # msvc
  - cmd: python waf build_msvc
  - cmd: python waf install_msvc
  - cmd: cd build/msvc/tests
  - cmd: lua -e"_U=true" all.lua
  # - cmd: lua all.lua
  - cmd: cd ../../..
  - cmd: python waf uninstall_msvc
  - cmd: python waf clean_msvc
  # gcc
  - python waf build_gcc
  - cmd: python waf install_gcc
  - sh: sudo python waf install_gcc
  - cd build/gcc/tests
  - lua -e"_U=true" all.lua
  #- sh: lua all.lua
  - cd ../../..
  - cmd: python waf uninstall_gcc
  - sh: sudo python waf uninstall_gcc
  - python waf clean_gcc
  # clang
  - python waf build_clang
  - cmd: python waf install_clang
  - sh: sudo python waf install_clang
  - cd build/clang/tests
  - lua -e"_U=true" all.lua
  #- sh: lua all.lua
  - cd ../../..
  - cmd: python waf uninstall_clang
  - sh: sudo python waf uninstall_clang
  - python waf clean_clang
  - python waf distclean
  # cygwin gcc
  - cmd: C:\cygwin64\bin\bash.exe -l -c "cd /cygdrive/c/projects/native-lua && python waf configure --include-tests"
  - cmd: C:\cygwin64\bin\bash.exe -l -c "cd /cygdrive/c/projects/native-lua && python waf build_gcc"
  - cmd: C:\cygwin64\bin\bash.exe -l -c "cd /cygdrive/c/projects/native-lua && python waf install_gcc"
  - cmd: C:\cygwin64\bin\bash.exe -l -c "cd /cygdrive/c/projects/native-lua/build/gcc/tests && which lua && lua -v && lua -e\"_U=true\" all.lua"
  #- cmd: C:\cygwin64\bin\bash.exe -l -c "cd /cygdrive/c/projects/native-lua/build/gcc/tests && which lua && lua -v && lua all.lua"
  - cmd: C:\cygwin64\bin\bash.exe -l -c "cd /cygdrive/c/projects/native-lua && python waf uninstall_gcc"
  - cmd: C:\cygwin64\bin\bash.exe -l -c "cd /cygdrive/c/projects/native-lua && python waf distclean"
  # configure including the test files and the ltests
  - python waf configure --include-tests --ltests
  # msvc
  - cmd: python waf build_msvc
  - cmd: python waf install_msvc
  - cmd: cd build/msvc/tests
  - cmd: lua -e"_U=true" all.lua
  # - cmd: lua all.lua
  - cmd: cd ../../..
  - cmd: python waf uninstall_msvc
  - cmd: python waf clean_msvc
  # gcc
  - python waf build_gcc
  - cmd: python waf install_gcc
  - sh: sudo python waf install_gcc
  - cd build/gcc/tests
  - lua -e"_U=true" all.lua
  #- sh: lua all.lua
  - cd ../../..
  - cmd: python waf uninstall_gcc
  - sh: sudo python waf uninstall_gcc
  - python waf clean_gcc
  # clang
  - python waf build_clang
  - cmd: python waf install_clang
  - sh: sudo python waf install_clang
  - cd build/clang/tests
  - lua -e"_U=true" all.lua
  #- sh: lua all.lua
  - cd ../../..
  - cmd: python waf uninstall_clang
  - sh: sudo python waf uninstall_clang
  - python waf clean_clang
  - python waf distclean
  # cygwin gcc
  - cmd: C:\cygwin64\bin\bash.exe -l -c "cd /cygdrive/c/projects/native-lua && python waf configure --include-tests"
  - cmd: C:\cygwin64\bin\bash.exe -l -c "cd /cygdrive/c/projects/native-lua && python waf build_gcc"
  - cmd: C:\cygwin64\bin\bash.exe -l -c "cd /cygdrive/c/projects/native-lua && python waf install_gcc"
  - cmd: C:\cygwin64\bin\bash.exe -l -c "cd /cygdrive/c/projects/native-lua/build/gcc/tests && which lua && lua -v && lua -e\"_U=true\" all.lua"
  #- cmd: C:\cygwin64\bin\bash.exe -l -c "cd /cygdrive/c/projects/native-lua/build/gcc/tests && which lua && lua -v && lua all.lua"
  - cmd: C:\cygwin64\bin\bash.exe -l -c "cd /cygdrive/c/projects/native-lua && python waf uninstall_gcc"
  - cmd: C:\cygwin64\bin\bash.exe -l -c "cd /cygdrive/c/projects/native-lua && python waf distclean"
