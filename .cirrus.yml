task:
  pip_cache:
    folder: ~/.cache/pip
    fingerprint_script: echo $CIRRUS_OS
  matrix:
    - container:
        image: debian:10
      matrix:
        - env:
            CC_LUA_BUILD: gcc
            CC_LUA_BUILD_OPTIONS: --include-tests
        - env:
            CC_LUA_BUILD: gcc
            CC_LUA_BUILD_OPTIONS: --include-tests --ltests
        - env:
            CC_LUA_BUILD: clang
            CC_LUA_BUILD_OPTIONS: --include-tests
        - env:
            CC_LUA_BUILD: clang
            CC_LUA_BUILD_OPTIONS: --include-tests --ltests
      common_install_script:
        - export RUNLEVEL=1
        - apt-get update
        - apt-get install -y dialog apt-utils lsb-release curl gnupg build-essential python3-pip software-properties-common libreadline7 libreadline-dev
        - python3 -m pip install --upgrade pip
        - python3 -m pip install --upgrade --requirement requirements.txt
      clang_install_script: |
        export RUNLEVEL=1
        if [ "$CC_LUA_BUILD" == "clang" ]; then
          curl -o llvm-snapshot.gpg.key https://apt.llvm.org/llvm-snapshot.gpg.key
          cat llvm-snapshot.gpg.key
          apt-key add llvm-snapshot.gpg.key
          apt-get update
          apt-add-repository "deb http://apt.llvm.org/buster/ llvm-toolchain-buster-11 main"
          apt-get update
          apt-get -y upgrade
          apt-get install -y clang-11 lld-11
          update-alternatives --install /usr/bin/clang clang /usr/bin/clang-11 100
        fi
    - container:
        image: fedora:33
      matrix:
        - env:
            CC_LUA_BUILD: gcc
            CC_LUA_BUILD_OPTIONS: --include-tests
        - env:
            CC_LUA_BUILD: gcc
            CC_LUA_BUILD_OPTIONS: --include-tests --ltests
        - env:
            CC_LUA_BUILD: clang
            CC_LUA_BUILD_OPTIONS: --include-tests
        - env:
            CC_LUA_BUILD: clang
            CC_LUA_BUILD_OPTIONS: --include-tests --ltests
      common_install_script:
        - export RUNLEVEL=1
        - dnf -y update
        - dnf -y install redhat-lsb-core python3-pip readline readline-devel
        - python3 -m pip install --upgrade pip
        - python3 -m pip install --upgrade --requirement requirements.txt
      gcc_install_script: |
        export RUNLEVEL=1
        if [ "$CC_LUA_BUILD" == "gcc" ]; then
          dnf -y install gcc
        fi
      clang_install_script: |
        export RUNLEVEL=1
        if [ "$CC_LUA_BUILD" == "clang" ]; then
          dnf -y install clang
        fi
    - container:
        image: ubuntu:focal
        cpu: 4
      matrix:
        - env:
            CC_LUA_BUILD: gcc
            CC_LUA_BUILD_OPTIONS: --include-tests
        - env:
            CC_LUA_BUILD: gcc
            CC_LUA_BUILD_OPTIONS: --include-tests --ltests
        - env:
            CC_LUA_BUILD: clang
            CC_LUA_BUILD_OPTIONS: --include-tests
        - env:
            CC_LUA_BUILD: clang
            CC_LUA_BUILD_OPTIONS: --include-tests --ltests
      common_install_script:
        - export RUNLEVEL=1
        - export DEBIAN_FRONTEND=noninteractive
        - apt-get update
        - apt-get install -y apt-utils lsb-release curl gnupg dialog python3-pip build-essential software-properties-common libreadline8 libreadline-dev
        - python3 -m pip install --upgrade pip
        - python3 -m pip install --upgrade --requirement requirements.txt
      clang_install_script: |
        export RUNLEVEL=1
        if [ "$CC_LUA_BUILD" == "clang" ]; then
          apt-get install -y clang-10
          update-alternatives --install /usr/bin/clang clang /usr/bin/clang-10 100
        fi
    - freebsd_instance:
        image_family: freebsd-13-0
        cpu: 4
      matrix:
        - env:
            CC_LUA_BUILD: gcc
            CC_LUA_BUILD_OPTIONS: --include-tests
        - env:
            CC_LUA_BUILD: gcc
            CC_LUA_BUILD_OPTIONS: --include-tests --ltests
        - env:
            CC_LUA_BUILD: clang
            CC_LUA_BUILD_OPTIONS: --include-tests
        - env:
            CC_LUA_BUILD: clang
            CC_LUA_BUILD_OPTIONS: --include-tests --ltests
      common_install_script:
        - pkg update -f
        - env ASSUME_ALWAYS_YES=YES pkg bootstrap -f
        - env ASSUME_ALWAYS_YES=YES pkg upgrade pkg
        - env ASSUME_ALWAYS_YES=YES pkg install bash
        - python3 -m ensurepip --default-pip
        - python3 -m pip install --upgrade pip
        - python3 -m pip install --upgrade --requirement requirements.txt
      gcc_install_script: |
        if [ "$CC_LUA_BUILD" == "gcc" ]; then
          env ASSUME_ALWAYS_YES=YES pkg install lang/gcc
        fi
      freebsd_setup_script:
        - chsh -s /usr/local/bin/bash

  version_script:
    - python3 versions.py -t ${CC_LUA_BUILD}
  build_script:
    - python3 waf configure -v --check-c-compiler=${CC_LUA_BUILD} ${CC_LUA_BUILD_OPTIONS} build install
  test_script:
    - cd build/tests && lua -e"_U=true" all.lua
  clean_script:
    - python3 waf uninstall clean distclean
