task:
  only_if: "changesInclude('.cirrus.yml', '*.rst', '*.py', '*.conf', 'LICENSE' 'VERSION', 'waf', 'wscript', 'demos/**', 'docs/**', 'scripts/**', 'src/**', 'tests/**')"
  pip_cache:
    folder: ~/.cache/pip
    fingerprint_script: echo $CIRRUS_OS
  matrix:
    - container:
        image: debian:10
      install_script:
        - export RUNLEVEL=1
        - apt-get update
        - apt-get install -y apt-utils lsb-release curl gnupg
        - curl -o llvm-snapshot.gpg.key https://apt.llvm.org/llvm-snapshot.gpg.key
        - cat llvm-snapshot.gpg.key
        - apt-key add llvm-snapshot.gpg.key
        - apt-get update
        - lsb_release -a
        - apt-get install -y dialog
        - apt-get install -y software-properties-common libreadline7 libreadline-dev
        - apt-add-repository "deb http://apt.llvm.org/buster/ llvm-toolchain-buster-9 main"
        - apt-get update
        - apt-get -y upgrade
        - apt-get install -y build-essential doxygen graphviz python3-pip
        - apt-get install -y clang-9 lld-9
        - update-alternatives --install /usr/bin/clang clang /usr/bin/clang-9 100
        - pip3 install sphinx pathlib pyyaml -q

    - container:
        image: fedora:30
      install_script:
        - export RUNLEVEL=1
        - dnf -y update
        - dnf -y install redhat-lsb-core gcc clang python3-pip doxygen graphviz readline readline-devel
        - lsb_release -a
        - pip3 install sphinx pathlib pyyaml -q

    - container:
        image: ubuntu:bionic
      install_script:
        - export RUNLEVEL=1
        - apt-get update
        - apt-get install -y apt-utils lsb-release curl gnupg
        - curl -o llvm-snapshot.gpg.key https://apt.llvm.org/llvm-snapshot.gpg.key
        - cat llvm-snapshot.gpg.key
        - apt-key add llvm-snapshot.gpg.key
        - apt-get update
        - lsb_release -a
        - apt-get install -y dialog python3-pip
        - apt-get install -y software-properties-common libreadline7 libreadline-dev
        - apt-add-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main"
        - apt-get update
        - apt-get -y upgrade
        - apt-get install -y build-essential doxygen graphviz
        - apt-get install -y clang-9 lld-9
        - update-alternatives --install /usr/bin/clang clang /usr/bin/clang-9 100
        - pip3 install sphinx pathlib pyyaml -q

    - freebsd_instance:
        image_family: freebsd-12-1
      freebsd_install_script:
        - pkg update -f
        - env ASSUME_ALWAYS_YES=YES pkg bootstrap -f
        - env ASSUME_ALWAYS_YES=YES pkg upgrade pkg
        - env ASSUME_ALWAYS_YES=YES pkg install lang/gcc bash python37 py37-pip doxygen
        - ln -fs /usr/local/bin/python3 /usr/local/bin/python37
        - pip-3.7 install sphinx pathlib pyyaml -q
      freebsd_setup_script:
        - chsh -s /usr/local/bin/bash

  version_script:
    - python3 --version
    - gcc --version
    - clang --version
    - doxygen --version
    - dot -V
    - sphinx-build --version
  script:
    # basic configuration
    - python3 waf configure -v
    # documentation build
    - python3 waf build_docs
    - python3 waf clean_docs
    - python3 waf distclean
    # configuration
    - python3 waf configure --include-tests
    # gcc [
    - python3 waf build_gcc -v
    - python3 waf install_gcc -v
    - pushd build/gcc/tests
    - lua -e"_U=true" all.lua
    #- lua all.lua
    - popd
    - python3 waf uninstall_gcc
    - python3 waf clean_gcc
    # gcc ]
    - python3 waf distclean
    # including ltests
    - python3 waf configure --ltests --include-tests
    # gcc [
    - python3 waf build_gcc -v
    - python3 waf install_gcc -v
    - pushd build/gcc/tests
    - lua -e"_U=true" all.lua
    #- lua all.lua
    - popd
    - python3 waf uninstall_gcc
    - python3 waf clean_gcc
    # gcc ]
    # configuration
    - python3 waf configure --include-tests
    # clang [
    - python3 waf build_clang -v
    - python3 waf install_clang -v
    - pushd build/clang/tests
    - lua -e"_U=true" all.lua
    #- lua all.lua
    - popd
    - python3 waf uninstall_clang
    - python3 waf clean_clang
    # clang ]
    - python3 waf distclean
    # including ltests
    - python3 waf configure --ltests --include-tests
    # clang [
    - python3 waf build_clang -v
    - python3 waf install_clang -v
    - pushd build/clang/tests
    - lua -e"_U=true" all.lua
    #- lua all.lua
    - popd
    - python3 waf uninstall_clang
    - python3 waf clean_clang
    # clang ]
    # test script
    - python3 scripts/run_test.py -c gcc -c clang --simple-test
    - python3 scripts/run_test.py -c gcc -c clang --simple-test --ltests
